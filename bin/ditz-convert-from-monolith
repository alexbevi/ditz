#!/usr/bin/env ruby

require 'rubygems'
require 'fileutils'
require "ditz"

PROJECT_FN = "project.yaml"
CONFIG_FN = ".ditz-config"
def ISSUE_TO_FN i; "issue-#{i.id}.yaml" end

dir = "bugs"
project = Ditz::Project.from "bugs.yaml"
puts "making #{dir}"
FileUtils.mkdir dir
project.changed!
project.issues.each { |i| i.changed! }

project.validate!
project.assign_issue_names!
project.each_modelobject { |o| o.after_deserialize project }

## save project.yaml
dirty = project.each_modelobject { |o| break true if o.changed? } || false
if dirty
  fn = File.join dir, PROJECT_FN
  puts "writing #{fn}"
  project.each_modelobject { |o| o.before_serialize project }
  project.save! fn
end

## project issues are not model fields proper, so they must be
## saved independently.
project.issues.each do |i|
  if i.changed?
    i.before_serialize project
    fn = File.join dir, ISSUE_TO_FN(i)
    puts "writing #{fn}"
    i.save! fn
  end
end

puts "You can delete bugs.yaml now."
